#include <iostream>
#include <string>
#include <algorithm>
#include <math.h>

using namespace std;

union{
        float num_uf;
        double num_ud;
        char ch[sizeof(double)];
    }num_u;

string num_bit(const int num){
    string res;
    int a = num;
    do{
        res = to_string(a % 2) + res;
        a = a / 2;
    }while (a > 0);
    return res;
}

string dr_bit(const string input, const int emspace){
    string res;
    double flag = stod(input)/(pow(10, input.length()));
    //cout<<flag<<endl;
    for(int i = 0; i <emspace; i++){
        flag = flag*2;
        //cout<<flag<<"  "<<(int)flag<<endl;
        if(flag < 1){
            res = res + '0';
        }
        if(flag >= 1){
            flag = flag - 1.0;
            res = res + '1';
        }
    }
    return res;
}

string fst_fd_bit(const string input, const int max_size, const int exp_size){
    string res, re, dr, re_s, dr_s, exp_b;
    int exp;
    int em_space = 0;
    bool flag = false;

    if(max_size==32){
        em_space=23;
        exp=127;
    }else{
        em_space=52;
        exp=1023;
    }

    if(stod(input)<0) res="1";
    else res="0";

    for(int i = 0; i < input.length(); i++){
        if(flag == true)dr=dr+input[i];
        if((input[i] != '.') && (flag == false)) re=re+input[i];
        else flag = true;
    }
    re=to_string(abs(stoi(re)));
    if(re!="0"){
        string re_s_buff=num_bit(abs(stoi(re)));
        re_s.resize(re_s_buff.size()-1);
        for(int i=0; i<re_s.size(); i++) re_s[i]=re_s_buff[i+1];

        exp=exp+re_s.size();
        exp_b=num_bit(exp);

        em_space=em_space-re_s.length();

        if(exp_b.size()<exp_size){
            for(int i = exp_b.size(); i<exp_size; i++){
                string buff = exp_b;
                exp_b="0";
                exp_b=exp_b+buff;
            }
        }
        dr_s=dr_bit(dr, em_space);
        res=res+exp_b+re_s+dr_s;
        return res;
    }
    if(re=="0"){
        string dr_s_buff;
        int flag = 0;
        dr_s_buff=dr_bit(dr, em_space);
        dr_s=dr_s_buff;
        for(int i = 0; i < em_space; i++){
            if(dr_s_buff[i] == '1'){
                flag=(i+1)*(-1);
                i=em_space*2;
            }
        }
        dr_s_buff=dr_bit(dr, em_space-flag);
        for(int i=(-flag); i<dr_s_buff.length();i++){
            dr_s[i+flag]=dr_s_buff[i];
        }
        exp=exp+flag;
        exp_b=num_bit(exp);
        if(exp_b.size()<exp_size){
            for(int i = exp_b.size(); i<exp_size; i++){
                string buff = exp_b;
                exp_b="0";
                exp_b=exp_b+buff;
            }
        }
        res=res+exp_b+dr_s;
        return res;
    }


}

void scnd_fd_bit(string num_type, string num){
    if(num_type == "--float" ){
        int res[32];
        int flag = 31;
        num_u.num_uf = stof(num);
        for(int j = 0; j<4; j++){
            for(int i = 0; i<8;i++){
                res[flag]=(num_u.ch[j]>>i &1);
                flag--;
            }
        }
        for(int i = 0; i<32;i++){
            cout<<res[i];
        }
    }
    if(num_type == "--double"){
        int res[64];
        int flag = 63;
        num_u.num_ud = stod(num);
        for(int j = 0; j<8; j++){
            for(int i = 0; i<8;i++){
                res[flag]=(num_u.ch[j]>>i &1);
                flag--;
            }
        }
        for(int i = 0; i<64;i++){
            cout<<res[i];
        }
    }
    cout<<endl;
}

int main(int argv, char** argc)
{
	string s = argc[2];
    if(s=="--float"){
		s = fst_fd_bit(argc[1], 32, 8);
        cout<<s<<endl;
        scnd_fd_bit("--float", argc[1]);
    }
    if(s=="--double"){
		s = fst_fd_bit(argc[1], 64, 11);
        cout<<s<<endl;
        scnd_fd_bit("--double", argc[1]);
    }
    return 0;
}
